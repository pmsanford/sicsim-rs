DISP    START   0
. Reset state
        LDA    #1
        STA     CURID
. Load the currently running PID
        LDA    @OLDPS
        AND     SWPIM
        SHIFTR  A,2
        STA     RPID
. If it's 0, we're booting. Skip
. storing state
        COMP   #0
        JEQ     FINDP
. Store the current process's state
. in its PSB
        LDA     RPTR
        JSUB    STORE
. Move pointer to first PSB
FINDP   LDA    #FPSB
        STA     CURPT
. Look for the next PID that's not
. the current running process...
SRCH    LDA    @CURPT
        AND     PIDMA
        COMP    RPID
        JEQ     AGAIN
. ...and is in the ready state
        LDA    @CURPT
        AND     RBMAS
        COMP   #0
        JGT     AGAIN
        JLT     AGAIN
. We found a runnable process - set
. it to running
        LDA    @CURPT
        AND     RUNMA
        OR      RUNSE
        STA    @CURPT
. Load its processor state, which
. transfers control flow
        LDA     CURPT
        STA     RPTR
        ADD    #3
        STA     CURPT
        STI    #10
        LPS    @CURPT
. Increment the current PSB ID
. for the next iteration through
. the search and check if we're
. past the end of the list
AGAIN   LDA     CURID
        ADD    #1
        STA     CURID
        COMP    PCNT
. If we're past the end of the
. PSB list, just halt for now
OUT     JGT     OUT
. Move the pointer to the next
. PSB and jump back to search
. again
        LDA     CURPT
        ADD     PSBSZ
        STA     CURPT
        J       SRCH
. Size of a PSB in bytes
PSBSZ   WORD    33
. Location of the stored state of
. the currently running process
OLDPS   BYTE    X'000166'
. Mask for running status
RBMAS   BYTE    X'C00000'
. Mask for process ID in PSB
PIDMA   BYTE    X'0F0000'
. Mask for process ID in SW
SWPIM   BYTE    X'3C0000'
. Mask for setting a process to running
RUNMA   BYTE    X'7FFFFF'
RUNSE   BYTE    X'400000'
. Current index in the PSB table
CURID   WORD    1
. Running process ID
RPID    RESW    1
. Pointer to current PSB
CURPT   RESW    1
. Process ID in current PSB
CPID    RESW    1
. Store processor state from OLDPS
. in the PSB pointed to by the
. address in A
.
. First, set status to ready
STORE   STA     SPTR
        LDA    @SPTR
        AND     REDMA
        STA    @SPTR
        LDA     SPTR
. Advance the pointer to the PS record
        ADD    #3
        STA     SPTR
. Store contents of T, X, and F
        STT     OLDT
        STX     OLDX
        STF     OLDF
. Set up the iteration for TIXR
        LDT    #8
        LDX    #0
. Set up the load from address
        LDA     OLDPS
        STA     LPTR
. Load a value from LPTR and
. store at SPTR
LOOP    LDA    @LPTR
        STA    @SPTR
        LDA     SPTR
. Increment both pointers to the next
. register
        ADD    #3
        STA     SPTR
        LDA     LPTR
        ADD    #3
        STA     LPTR
. Check if we're done with the WORD-sized
. registers
        TIXR    T
        JEQ     SFLT
        J       LOOP
. Copy the float register
SFLT    LDF    @LPTR
        STF    @SPTR
. Restore working register state
        LDT     OLDT
        LDX     OLDX
        LDF     OLDF
        RSUB
REDMA   BYTE    X'3FFFFF'
SPTR    RESW    1
LPTR    RESW    1
OLDT    RESW    1
OLDX    RESW    1
OLDF    RESB    4
. ==> HEADER
. PCNT: Count of programs, including finished ones
. Address 0x307
PCNT    BYTE    X'000003'
. Address 0x30A
RPTR    RESW    1
. ==> ITER
. STATE 
. BIT   MEANING
. 0-1   00 = ready, 01 = running, 10 = blocked, 11 = finished
. 2-3   Unused
. 4-7   Process ID
. 8-23  Unused
.
. Address 0x30D
FPSB    BYTE    X'010000'
FSW     BYTE    X'040000'
FPC     BYTE    X'0007D0'
FREGS   RESW    8
. Address 0x32E
SPSB    BYTE    X'020000'
SSW     BYTE    X'080000'
SPC     BYTE    X'0007E0'
SREGS   RESW    8
. Addres 0x34F
TPSB    BYTE    X'030000'
TSW     BYTE    X'0C0000'
TPC     BYTE    X'0007F0'
TREGS   RESW    8
        END     DISP
